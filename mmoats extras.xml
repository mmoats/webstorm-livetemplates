<templateSet group="mmoats extras">
  <template name="ang:controller" value="(function () {&#10;&#9;'use strict';&#10;&#10;&#9;angular&#10;&#9;&#9;.module('$moduleName$')&#10;&#9;&#9;&#9;.controller('$controllerName$', $controllerFn$);&#10;&#9;&#9;&#9;&#10;&#9;&#9;&#9;$controllerFn$.$inject = [''];&#10;&#10;&#9;&#9;&#9;function $controllerFn$ () {&#10;&#9;&#9;&#9;&#9;$END$&#10;&#9;&#9;&#9;}&#10;&#10;})();" description="Inserts a blank AngularJS Controller" toReformat="false" toShortenFQNames="true">
    <variable name="moduleName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="controllerName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="controllerFn" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ang:directive" value="(function () {&#10;&#9;'use strict';&#10;&#10;&#9;angular&#10;&#9;&#9;.module('$moduleName$')&#10;&#9;&#9;&#9;.directive('$directiveName$', $directiveFn$);&#10;&#10;&#9;&#9;&#9;function $directiveFn$ () {&#10;&#9;&#9;&#9;&#9;return {&#10;&#9;&#9;&#9;&#9;&#9;require: '?ngModel',&#10;&#9;&#9;&#9;&#9;&#9;priority: 1000,&#10;&#9;&#9;&#9;&#9;&#9;link: function (scope, element, attrs, ngModelCtrl) {&#10;                        $END$&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#10;})();" description="Inserts a blank AngularJS Directive" toReformat="false" toShortenFQNames="true">
    <variable name="moduleName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="directiveName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="directiveFn" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ang:factory" value="(function () {&#10;&#9;'use strict';&#10;&#10;&#9;angular&#10;&#9;&#9;.module('$moduleName$')&#10;&#9;&#9;&#9;.factory('$factoryName$', $factoryFn$);&#10;&#10;&#9;&#9;&#9;function $factoryFn$ () {&#10;&#9;&#9;&#9;&#9;return {&#10;                    $END$&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#10;})();" description="Inserts a blank AngularJS Factory" toReformat="false" toShortenFQNames="true">
    <variable name="moduleName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="factoryName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="factoryFn" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ang:filter" value="(function () {&#10;&#9;'use strict';&#10;&#10;&#9;angular&#10;&#9;&#9;.module('$moduleName$')&#10;&#9;&#9;&#9;.filter('$factoryName$', $factoryFn$);&#10;&#10;&#9;&#9;&#9;function $factoryFn$ () {&#10;&#9;&#9;&#9;&#9;return {&#10;                    $END$&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#10;})();" description="Inserts a blank AngularJS Filter" toReformat="false" toShortenFQNames="true">
    <variable name="moduleName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="factoryName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="factoryFn" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ang:routes" value="(function () {&#10;&#9;'use strict';&#10;&#10;&#9;angular&#10;&#9;&#9;.module('$moduleName$')&#10;&#9;&#9;&#9;.config(Routes)&#10;&#9;&#9;&#9;.run(RouteDefault);&#10;&#10;&#9;&#9;&#9;Routes.$inject = ['$stateProvider'];&#10;&#9;&#9;&#9;RouteDefault.$inject = ['$state'];&#10;&#10;&#9;&#9;&#9;function Routes($stateProvider) {&#10;&#9;&#9;&#9;&#9;$stateProvider&#10;&#9;&#9;&#9;&#9;&#9;.state('$routeName$', {&#10;&#9;&#9;&#9;&#9;&#9;&#9;abstract: true,&#10;&#9;&#9;&#9;&#9;&#9;&#9;templateProvider: ['$templateCache', function ($templateCache) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;return $templateCache.get('$componentName$/$partialName$.partial.html')&#10;&#9;&#9;&#9;&#9;&#9;&#9;}],&#10;&#9;&#9;&#9;&#9;&#9;&#9;controller: '$controllerName$',&#10;&#9;&#9;&#9;&#9;&#9;&#9;controllerAs: 'vm'&#10;&#9;&#9;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;function RouteDefault($state) {&#10;&#9;&#9;&#9;&#9;$state.go('$routeName$');&#10;&#9;&#9;&#9;}&#10;&#10;})();" description="Inserts a ui-router StateProvider file with example" toReformat="false" toShortenFQNames="true">
    <variable name="moduleName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="routeName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="componentName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="partialName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="controllerName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ang:service" value="(function () {&#10;&#9;'use strict';&#10;&#10;&#9;angular&#10;&#9;&#9;.module('$moduleName$')&#10;&#9;&#9;&#9;.service('$serviceName$', $serviceFn$);&#10;&#10;&#9;&#9;&#9;function $serviceFn$ () {&#10;&#9;&#9;&#9;&#9;return {&#10;                    $END$&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#10;})();" description="Inserts a blank AngularJS service" toReformat="false" toShortenFQNames="true">
    <variable name="moduleName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="serviceName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="serviceFn" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ang:gulp" value="// Include Plugins&#10;var gulp = require('gulp'),&#10;&#9;browserSync = require('browser-sync').create(),&#10;&#9;sass = require('gulp-sass'),&#10;&#9;sourcemaps = require('gulp-sourcemaps'),&#10;&#9;concat = require('gulp-concat'),&#10;&#9;uglify = require('gulp-uglify'),&#10;&#9;rename = require('gulp-rename'),&#10;&#9;ngConstant = require('gulp-ng-constant'),&#10;&#9;templateCache = require('gulp-angular-templatecache'),&#10;&#9;mainBowerFiles = require('main-bower-files'),&#10;&#9;ngAnnotate = require('gulp-ng-annotate'),&#10;&#9;minifyCSS = require('gulp-minify-css'),&#10;&#9;plumber = require('gulp-plumber'),&#10;&#9;template = require('gulp-template'),&#10;&#9;proxyMiddleware = require('http-proxy-middleware');&#10;&#10;&#10;// Multiple Environments&#10;// NODE_ENV=qa gulp&#10;// NODE_ENV=production gulp&#10;var env = process.env.NODE_ENV || 'local';&#10;&#10;// Configuration&#10;var baseConfig = require('./src/base_config.json');&#10;var gulpConfig = require('./src/gulp_config.json');&#10;&#10;// Static server&#10;gulp.task('browser-sync', function() {&#10;&#9;browserSync.init({&#10;&#9;&#9;server: {&#10;&#9;&#9;&#9;baseDir: gulpConfig.public,&#10;&#9;&#9;&#9;//https: true,&#10;&#9;&#9;&#9;middleware: [&#10;&#9;&#9;&#9;&#9;proxyMiddleware(gulpConfig.api_proxy, {&#10;&#9;&#9;&#9;&#9;&#9;target: baseConfig['constant'][env]['EnvironmentConfig']['api'],&#10;&#9;&#9;&#9;&#9;&#9;changeOrigin: true&#10;&#9;&#9;&#9;&#9;})&#10;&#9;&#9;&#9;]&#10;&#9;&#9;}&#10;&#9;});&#10;});&#10;&#10;// Angular Environment Config&#10;gulp.task('base', function () {&#10;&#9;return ngConstant({&#10;&#9;&#9;name: baseConfig['module'],&#10;&#9;&#9;constants: baseConfig['constant'][env],&#10;&#9;&#9;deps: baseConfig['deps'],&#10;&#9;&#9;stream: true&#10;&#9;}).pipe(rename(baseConfig['module']+'.base.js'))&#10;&#9;&#9;.pipe(gulp.dest(gulpConfig.public + '/js'));&#10;});&#10;&#10;// Compile Our Sass&#10;gulp.task('sass', function() {&#10;&#9;return gulp.src(gulpConfig.sass)&#10;&#9;&#9;.pipe(sourcemaps.init())&#10;&#9;&#9;.pipe(plumber({&#10;&#9;&#9;&#9;errorHandler: function (err) {&#10;&#9;&#9;&#9;&#9;browserSync.notify(err.message);&#10;&#9;&#9;&#9;&#9;console.log(err.message);&#10;&#9;&#9;&#9;&#9;this.emit('end');&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}))&#10;&#9;&#9;.pipe(sass().on('error', sass.logError))&#10;&#9;&#9;.pipe(concat(baseConfig['module'] + '.all.css'))&#10;&#9;&#9;.pipe(gulp.dest(gulpConfig.public + '/css'))&#10;&#9;&#9;.pipe(rename(baseConfig['module'] + '.all.min.css'))&#10;&#9;&#9;.pipe(minifyCSS())&#10;&#9;&#9;.pipe(sourcemaps.write('maps'))&#10;&#9;&#9;.pipe(gulp.dest(gulpConfig.public + '/css'))&#10;&#9;&#9;.pipe(browserSync.stream());&#10;});&#10;&#10;// Concatenate &amp; Minify JS&#10;gulp.task('javascript', function() {&#10;&#9;return gulp.src(gulpConfig.js)&#10;&#9;&#9;.pipe(sourcemaps.init())&#10;&#9;&#9;.pipe(plumber({&#10;&#9;&#9;&#9;errorHandler: function (err) {&#10;&#9;&#9;&#9;&#9;browserSync.notify(err.message);&#10;&#9;&#9;&#9;&#9;console.log(err.message);&#10;&#9;&#9;&#9;&#9;this.emit('end');&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}))&#10;&#9;&#9;.pipe(ngAnnotate())&#10;&#9;&#9;.pipe(concat(baseConfig['module']+'.all.js'))&#10;&#9;&#9;.pipe(gulp.dest(gulpConfig.public+'/js'))&#10;&#9;&#9;.pipe(rename(baseConfig['module']+'.all.min.js'))&#10;&#9;&#9;.pipe(uglify())&#10;&#9;&#9;.pipe(sourcemaps.write('maps'))&#10;&#9;&#9;.pipe(gulp.dest(gulpConfig.public + '/js'))&#10;&#9;&#9;.pipe(browserSync.stream());&#10;});&#10;&#10;// Compile Angular Templates&#10;gulp.task('ng-templates', function () {&#10;&#9;return gulp.src(gulpConfig.partials)&#10;&#9;&#9;.pipe(templateCache({&quot;filename&quot;:baseConfig['module']+&quot;.partials.js&quot;,&quot;module&quot;: baseConfig['module']}))&#10;&#9;&#9;.pipe(gulp.dest(gulpConfig.public + '/js'))&#10;&#9;&#9;.pipe(browserSync.stream());&#10;});&#10;&#10;// Grab bower main files&#10;gulp.task('bower-files', function () {&#10;&#9;return gulp.src(mainBowerFiles())&#10;&#9;&#9;.pipe(gulp.dest(gulpConfig.public + '/lib'));&#10;});&#10;&#10;// Assets for public&#10;gulp.task('assets', function () {&#10;&#9;return gulp.src(gulpConfig.assets)&#10;&#9;&#9;.pipe(gulp.dest(gulpConfig.public))&#10;});&#10;&#10;// Partial for CMS&#10;gulp.task('component-partial', function () {&#10;&#9;return gulp.src('./src/module.html')&#10;&#9;&#9;.pipe(template({module: baseConfig['module']}))&#10;&#9;&#9;.pipe(rename(baseConfig['module'] + '.html'))&#10;&#9;&#9;.pipe(gulp.dest(gulpConfig.public));&#10;});&#10;&#10;// Dev index for component development&#10;gulp.task('dev-index', function () {&#10;&#9;return gulp.src('./src/index.html')&#10;&#9;&#9;.pipe(template({module: baseConfig['module']}))&#10;&#9;&#9;.pipe(gulp.dest(gulpConfig.public));&#10;});&#10;&#10;// Build deploy code&#10;gulp.task('build', ['base', 'sass', 'javascript', 'ng-templates', 'component-partial', 'assets']);&#10;&#10;// Default Task + Watches&#10;gulp.task('default', ['browser-sync', 'base', 'sass', 'javascript', 'ng-templates', 'bower-files', 'assets', 'component-partial', 'dev-index'], function () {&#10;&#9;gulp.watch(gulpConfig.js, ['javascript']);&#10;&#9;gulp.watch(gulpConfig.sass, ['sass']);&#10;&#9;gulp.watch([gulpConfig.html, gulpConfig.partials], ['ng-templates', 'dev-index']);&#10;&#9;gulp.watch(gulpConfig.assets, ['assets']);&#10;});" description="Inserts Gulp file" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ang:gulpconfig" value="{&#10;&#9;&quot;public&quot;: &quot;./dist&quot;,&#10;&#9;&quot;api_proxy&quot;: &quot;/api&quot;,&#10;&#9;&quot;assets&quot;: [&#10;&#9;&#9;&quot;./vendor/**&quot;&#10;&#9;],&#10;&#9;&quot;js&quot;: [&#10;&#9;&#9;&quot;./src/**/*.module.js&quot;,&#10;&#9;&#9;&quot;./src/**/*.js&quot;,&#10;&#9;&#9;&quot;./src/**/**/*.js&quot;&#10;&#9;],&#10;&#9;&quot;partials&quot;: [&#10;&#9;&#9;&quot;./src/**/*.html&quot;&#10;&#9;],&#10;&#9;&quot;sass&quot;: [&#10;&#9;&#9;&quot;./src/**/*.scss&quot;&#10;&#9;],&#10;&#9;&quot;html&quot;: [&#10;&#9;&#9;&quot;./src/index.html&quot;&#10;&#9;]&#10;}" description="Inserts companion gulpfile config" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JSON" value="true" />
      <option name="JAVA_SCRIPT" value="false" />
    </context>
  </template>
  <template name="ang:config" value="{&#10;&#9;&quot;module&quot;: &quot;$moduleName$&quot;,&#10;&#9;&quot;deps&quot;: [&#10;&#9;&#9;&quot;ui.router&quot;&#10;&#9;],&#10;&#9;&quot;constant&quot;: {&#10;&#9;&#9;&quot;local&quot;: {&#10;&#9;&#9;&#9;&quot;EnvironmentConfig&quot;: {&#10;&#9;&#9;&#9;&#9;&quot;api&quot;: &quot;http://localhost:9000&quot;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;},&#10;&#9;&#9;&quot;qa&quot;: {&#10;&#9;&#9;&#9;&quot;EnvironmentConfig&quot;: {&#10;&#9;&#9;&#9;&#9;&quot;api&quot;: &quot;http://qa.url.com&quot;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;},&#10;&#9;&#9;&quot;production&quot;: {&#10;&#9;&#9;&#9;&quot;EnvironmentConfig&quot;: {&#10;&#9;&#9;&#9;&#9;&quot;api&quot;: &quot;http://production.url.com&quot;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;}&#10;}" description="Inserts companion project config" toReformat="false" toShortenFQNames="true">
    <variable name="moduleName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JSON" value="true" />
    </context>
  </template>
  <template name="ang:html" value="&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head lang=&quot;en&quot;&gt;&#10;&#9;&lt;meta charset=&quot;UTF-8&quot;&gt;&#10;&#9;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;&#10;&#9;&lt;meta name=“viewport” content=&quot;initial-scale=1.0&quot;&gt;&#10;&#9;&lt;title&gt;Class Schedules&lt;/title&gt;&#10;&#9;&lt;link rel=&quot;stylesheet&quot; href=&quot;css/&lt;%= moduleName %&gt;.all.min.css&quot;/&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;div ng-app=&quot;&lt;%= moduleName %&gt;&quot; ng-strict-di&gt;&#10;&#9;&lt;ui-view&gt;&lt;/ui-view&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;script src=&quot;lib/angular.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;script src=&quot;lib/angular-ui-router.min.js&quot;&gt;&lt;/script&gt;&#10;&#10;&lt;script src=&quot;js/&lt;%= moduleName %&gt;.base.js&quot;&gt;&lt;/script&gt;&#10;&lt;script src=&quot;js/&lt;%= moduleName %&gt;.all.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;script src=&quot;js/&lt;%= moduleName %&gt;.partials.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" description="Inserts default HTML stub" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="ang:package" value="{&#10;  &quot;name&quot;: &quot;$moduleName$&quot;,&#10;  &quot;version&quot;: &quot;0.1.0&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;description&quot;: &quot;Gulp Angular Build&quot;,&#10;  &quot;main&quot;: &quot;gulpfile.js&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;&#10;  },&#10;  &quot;author&quot;: &quot;&quot;,&#10;  &quot;license&quot;: &quot;&quot;,&#10;  &quot;dependencies&quot;: {&#10;    &quot;gulp&quot;: &quot;^3.9.0&quot;,&#10;    &quot;gulp-angular-templatecache&quot;: &quot;^1.6.0&quot;,&#10;    &quot;gulp-concat&quot;: &quot;^2.5.2&quot;,&#10;    &quot;gulp-minify-css&quot;: &quot;^1.2.0&quot;,&#10;    &quot;gulp-ng-annotate&quot;: &quot;^1.0.0&quot;,&#10;    &quot;gulp-ng-constant&quot;: &quot;^0.3.0&quot;,&#10;    &quot;gulp-plumber&quot;: &quot;^1.0.1&quot;,&#10;    &quot;gulp-rename&quot;: &quot;^1.2.2&quot;,&#10;    &quot;gulp-sass&quot;: &quot;^2.0.1&quot;,&#10;    &quot;gulp-sourcemaps&quot;: &quot;^1.5.2&quot;,&#10;    &quot;gulp-template&quot;: &quot;^3.0.0&quot;,&#10;    &quot;gulp-uglify&quot;: &quot;^1.2.0&quot;,&#10;    &quot;main-bower-files&quot;: &quot;^2.8.0&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;browser-sync&quot;: &quot;^2.7.12&quot;,&#10;    &quot;http-proxy-middleware&quot;: &quot;^0.1.0&quot;,&#10;    &quot;proxy-middleware&quot;: &quot;^0.13.0&quot;&#10;  }&#10;}" description="Insert package.json file for gulpfile.js" toReformat="false" toShortenFQNames="true">
    <variable name="moduleName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JSON" value="true" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_STATEMENT" value="false" />
    </context>
  </template>
  <template name="ang:state" value=".state('$HOME$', {&#10;    templateProvider: ['$templateCache', function ($templateCache) {&#10;        return $templateCache.get('$COMPONENTFOLDER$/$COMPONENTNAME$.partial.html');&#10;    }],&#10;    controller: '$CONTROLLER$',&#10;    controllerAs: 'vm'&#10;})" description="Inserts a new ui-router State definition" toReformat="false" toShortenFQNames="true">
    <variable name="HOME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="COMPONENTFOLDER" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="COMPONENTNAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CONTROLLER" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ang:module" value="(function () {&#10;&#9;'use strict';&#10;&#10;&#9;angular&#10;&#9;&#9;.module('$moduleName$', [&#10;&#9;&#9;&#9;'ui.router'$END$&#10;&#9;&#9;]);&#10;&#10;})();" description="Inserts a blank AngularJS Module" toReformat="false" toShortenFQNames="true">
    <variable name="moduleName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>